struct Output
{
  float4 position : POSITION;
  float4 color : COLOR;
  float3 dim : TEXCOORD0;
};

float4 calculateBoxVertexPosition(float4 pos, float3 tex, float4x4 worldviewproj, float4 size)
{
  half4 s = half4(tex, 0.0) * size;
  return mul(worldviewproj, (pos + half4( (s.xxx * half3(1.0, 0.0, 0.0)) + (s.yyy * half3(0.0, 1.0, 0.0)) + (s.zzz * half3(0.0, 0.0, -1.0)), 0.0 )));
}


Output pointCloudBoxVP_main(float4 position : POSITION,
                            float4 color : COLOR,
                            float3 tex : TEXCOORD0,
                                  
                            uniform float4x4 worldviewproj,
                            uniform float4 size,
                            uniform float4 alpha)
{
  Output OUT;
  OUT.position = calculateBoxVertexPosition(position, tex, worldviewproj, size);
  OUT.color = float4(color.x, color.y, color.z, alpha.x);
  OUT.dim = tex;
  return OUT;
}

Output pointCloudBoxVP_Selection_main(float4 position : POSITION, 
                                      float4 color : COLOR, 
                                      float3 tex : TEXCOORD0,
                                      
                                      uniform float4x4 worldviewproj,
                                      uniform float4 size,
                                      uniform float4 pick_color)
{ 
  Output OUT;
  OUT.position = calculateBoxVertexPosition(position, tex, worldviewproj, size);
  OUT.color = pick_color;
  OUT.dim = tex;
  return OUT;
}

Output pointCloudBoxWithGP_VP_main(float4 position : POSITION, 
                                  float4 color : COLOR, 
                                  
                                  uniform float4 alpha)
{
  Output OUT;
  OUT.position = position;
  OUT.color = float4(color.x, color.y, color.z, alpha.x);
  return OUT;
}